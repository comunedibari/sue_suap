/*
 * PaymentController.java
 *
 * Created on 10 febbraio 2005, 12.17
 */

package it.people.util.payment;

import it.people.City;
import it.people.layout.multicommune.MultiCommuneCss;
import it.people.process.AbstractPplProcess;
import it.people.process.data.AbstractData;
import it.people.util.ActivityLogger;
import it.people.util.payment.request.EnteDestinatario;
import it.people.util.payment.request.ImportoContabile;
import it.people.util.payment.request.PaymentRequestParameter;
import it.regulus.osa.constant.Constant;
import it.regulus.osa.secretcode.PayServerClient;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.Date;
import java.util.Iterator;
import java.util.Properties;

import javax.servlet.http.HttpServletRequest;

import org.apache.struts.action.ActionForward;
import org.apache.struts.action.RedirectingActionForward;

/**
 * Gestisce le chiamate al server di pagamento
 * @author manelli
 */
public class PaymentManager {
    private static final String CONTENT_TYPE = "text/html; charset=windows-1252";
    private ActivityLogger m_oTracer = ActivityLogger.getInstance();
    private static final int REQOK                      = 0;
    private static final int REQFAILED                  = 1;
    private static final int REQERROR                   = 2;
    private static final int WINDOW_MINUTES             = 10;
    
    private int m_iErrorValue = REQFAILED;
    private String m_sErrorDescr = "";
    private String m_sRedirectUrl = "";
    private static final String URL_BACK = "abortPayment.do";
    private static final String URL_RITORNO = "returnFromPayment.do";
    private static final String URL_ERRORE = "Errore.htm";
    private static final String URL_NOTIFICA = "framework/payment/notification.jsp";
    private static final String URL_CSS_BASE = "css/mip";
    
    private String propFile;
       
    /** Creates a new instance of PaymentController */
    public PaymentManager(String propFile) {
        this.propFile = propFile;
    }

    /** 
     * Invia i dati di pagamento al server e riceve una actionforward di risposta.
     */
    public ActionForward sendToPayment(
    		AbstractPplProcess pplProcess, 
    		PaymentRequestParameter paymentRequestParameter,
			String paymentId, 
			City commune,
			HttpServletRequest request) {
        
        AbstractData data = (AbstractData)pplProcess.getData();
        m_oTracer.log(this.getClass(), "SendToPaymentSys con operazione " +
                paymentId, ActivityLogger.DEBUG);

        String sUrl = this.prepareSendBuffer(
                paymentRequestParameter, 
                paymentId,
                data.getTitolare().getPersonaFisica().getCodiceFiscale(),
                commune.getKey(),
                request
		);

        m_oTracer.log(this.getClass(), "SendToPaymentSys con url " + sUrl, ActivityLogger.DEBUG);
        
        if (sUrl.length() > 0) {
            ActionForward afwd = new RedirectingActionForward();
            afwd.setPath(sUrl);
            return afwd;
        }
        
        return null;
    }
            
    public EsitoPagamento getEsitoPagamento(String reqBuffer) {
        String buffer;
        try {
            String bt = java.net.URLDecoder.decode(reqBuffer, "utf-8");
            buffer = readReturnBuffer(bt);
        } catch(UnsupportedEncodingException e) {
            return null;
        }
        
        // testa errore
        if (m_iErrorValue == REQOK) {
            EsitoPagamento ep = new EsitoPagamento(buffer);
            return ep;
        } else {
            return null;
        }
    }
    
    public String getInfoPagamento(String reqBuffer) {
        try {
            Properties oConfig = new Properties();
            
            oConfig.load(new FileInputStream(propFile));
            
            String sServiceUrl = oConfig.getProperty("service.url");
            String sBufferData = null;;
                        
            // sezione su cig.xml
            PayServerClient osc;
            osc = new PayServerClient("CHIAVE", PayServerClient.PS2S_KT_CLEAR);
            
            // comunicazione server2server
            osc.ServerURL(oConfig.getProperty("paymentsystem.S2SUrl") + "PID2Data.jsp");
                        
            //TODO mettere una env variable per il timeout
            int ret = osc.PS2S_PC_PID2Data(reqBuffer, oConfig.getProperty("paymentsystem.symbol"), new Date(), 10);
            
            m_oTracer.log(this.getClass(), "PS2S_PC_PID2Data ritorna " + ret, ActivityLogger.DEBUG);
            if (ret == Constant.RESULT_SUCCESS) {
                try {
                    sBufferData = osc.PS2S_DataBuffer();
                    return sBufferData;
                } catch(Exception ex) {
                    m_oTracer.log(this.getClass(), "encode exception " + ex.toString(), ActivityLogger.ERROR);
                }
            }
        } catch (Exception exc) {
            m_oTracer.log(this.getClass(), "PrepareBuffer exception " + exc.toString(), ActivityLogger.ERROR);
        }
        
        return null;
    }

    protected String getCssUrl(HttpServletRequest request, String communeId, String baseUrl) {
        MultiCommuneCss multiCommuneCss = new MultiCommuneCss(request);
        
        String specializedCssUrl = baseUrl + "_" + communeId + ".css";
        if (multiCommuneCss.cssExist(specializedCssUrl))
            return specializedCssUrl;
        
        return baseUrl + ".css";
    }
    
    protected String prepareSendBuffer(PaymentRequestParameter paymentParameter, String sNumOperazione, String sCodFisc, String communeId, HttpServletRequest request) {
        try {
            Properties oConfig = new Properties();            
            oConfig.load(new FileInputStream(propFile));
            
            String sBufferData = "";
            String sServiceUrl = oConfig.getProperty("service.url");
            String notificationUrl = oConfig.getProperty("notification.url");
            
            boolean newPaymentsystemType = "New".equalsIgnoreCase(oConfig.getProperty("paymentsystem.type"))?true:false;
            
            sBufferData="<PaymentRequest>";
            sBufferData += "<PortaleID>" + oConfig.getProperty("paymentsystem.portalid") + "</PortaleID>";
            sBufferData += "<Funzione>PAGAMENTO</Funzione>";
            sBufferData += "<URLDiRitorno>" + sServiceUrl + URL_RITORNO + "</URLDiRitorno>";
            sBufferData += "<URLDiErrore>" + sServiceUrl + URL_ERRORE + "</URLDiErrore>";
            sBufferData += "<URLBack>" + sServiceUrl + URL_BACK + "</URLBack>";            
            sBufferData += "<URLDiNotifica>" + notificationUrl + URL_NOTIFICA + "</URLDiNotifica>";
            if (newPaymentsystemType)
            	sBufferData += "<CommitNotifica>S</CommitNotifica>";
            sBufferData += "<EmailPortale></EmailPortale>";
            
            // Il nodo NotificaEsitiNegativi indica al MIP di non comunicare 
            // gli esiti negativi, questa modifica è necessaria in quanto il 
            // diversamente il MIP notifica più di un esito negativo, diversamente
            // da quanto atteso dal framework e dai servizi per i quali l'esito
            // negativo deve essere unico.
            sBufferData += "<NotificaEsitiNegativi>N</NotificaEsitiNegativi>";
            
            // Indica al MIP di ritornare i dati specifici
            sBufferData += "<RitornaDatiSpecifici>S</RitornaDatiSpecifici>";      
            
            // PAYMENT DATA
            sBufferData += "<PaymentData>";
            sBufferData += "<NumeroOperazione>" + sNumOperazione + "</NumeroOperazione>";
            sBufferData += "<Valuta>EUR</Valuta>";
            sBufferData += "<Importo>" + paymentParameter.getPaymentData().getImporto() + "</Importo>";
            sBufferData += "<ImportoCommissioni></ImportoCommissioni>";
            sBufferData += "<CalcoloCommissioni>S</CalcoloCommissioni>";
            sBufferData += "</PaymentData>";
            
            // USER DATA
            sBufferData += "<UserData>";
            sBufferData += "<EmailUtente>" + paymentParameter.getUserData().getEmailUtente().toUnicodeString() + "</EmailUtente>";            
            sBufferData += "<IdentificativoUtente>" + sCodFisc + "</IdentificativoUtente>";
            sBufferData += "<UserID></UserID>";
            sBufferData += "<TokenID></TokenID>";
            sBufferData += "</UserData>";
            
            // SERVICE DATA
            sBufferData += "<ServiceData>";
            sBufferData += "<IDServizio>" + paymentParameter.getServiceData().getIdServizio() + "</IDServizio>";
            if (newPaymentsystemType)
            	sBufferData += "<URLCSS>" + sServiceUrl + getCssUrl(request, communeId, URL_CSS_BASE)  + "</URLCSS>";
            if (paymentParameter.getServiceData().getNumeroDocumento() != null)
                sBufferData += "<NumeroDocumento>" + paymentParameter.getServiceData().getNumeroDocumento() + "</NumeroDocumento>";            
            if (paymentParameter.getServiceData().getAnnoDocumento() != null)
                sBufferData += "<AnnoDocumento>" + paymentParameter.getServiceData().getAnnoDocumento() + "</AnnoDocumento>";
            if (paymentParameter.getServiceData().getDatiSpecifici() != null)
                sBufferData += "<DatiSpecifici><![CDATA[" + paymentParameter.getServiceData().getDatiSpecifici() + "]]></DatiSpecifici>";                        
            sBufferData += "</ServiceData>";
            
            // ACCOUNTING DATA
            if (paymentParameter.getAccountingData().getEntiDestinatari().size() > 0
                    || paymentParameter.getAccountingData().getImportiContabili().size() > 0) {
	            
                sBufferData += "<AccountingData>";

                if (paymentParameter.getAccountingData().getImportiContabili().size() > 0) {
	                sBufferData += "<ImportiContabili>";
	                for (Iterator iter = paymentParameter.getAccountingData().getImportiContabili().iterator(); iter.hasNext();) {
	                    ImportoContabile importoContabile = (ImportoContabile) iter.next();
	                    sBufferData += "<ImportoContabile>";
	                    if (importoContabile.getIdentificativo() != null)
	                        sBufferData += "<Identificativo>" + importoContabile.getIdentificativo()+ "</Identificativo>";
	                    if (importoContabile.getValore() != null)	                    
	                        sBufferData += "<Valore>" + importoContabile.getValore()+ "</Valore>";
	                    sBufferData += "</ImportoContabile>";
	                }
	                sBufferData += "</ImportiContabili>";
                }
                
                if (paymentParameter.getAccountingData().getEntiDestinatari().size() > 0) {
	                sBufferData += "<EntiDestinatari>";
	                for (Iterator iter = paymentParameter.getAccountingData().getEntiDestinatari().iterator(); iter.hasNext();) {
	                    EnteDestinatario enteDestinatario = (EnteDestinatario) iter.next();
	                    sBufferData += "<EnteDestinatario>";
	                    if (enteDestinatario.getIdentificativo() != null)
	                        sBufferData += "<Identificativo>" + enteDestinatario.getIdentificativo() + "</Identificativo>";
	                    if (enteDestinatario.getValore() != null)
	                        sBufferData += "<Valore>"+ enteDestinatario.getValore() + "</Valore>";
	                    if (enteDestinatario.getCausale() != null)
	                        sBufferData += "<Causale>" + enteDestinatario.getCausale() + "</Causale>";
	                    if (enteDestinatario.getImportoContabileIngresso() != null)
	                        sBufferData += "<ImportoContabileIngresso>" + enteDestinatario.getImportoContabileIngresso() + "</ImportoContabileIngresso>";
	                    if (enteDestinatario.getImportoContabileUscita() != null)
	                        sBufferData += "<ImportoContabileUscita>" + enteDestinatario.getImportoContabileUscita()+ "</ImportoContabileUscita>";
						sBufferData += "</EnteDestinatario>";	                    
	                }
	                sBufferData += "</EntiDestinatari>";
                }
	            
	            sBufferData += "</AccountingData>";
            }
            sBufferData += "</PaymentRequest>";
            
            m_oTracer.log(this.getClass(), "SendToPaymentSys con buffer " + sBufferData, ActivityLogger.DEBUG);
            
            // sezione su cig.xml
            PayServerClient osc;
            osc = new PayServerClient("CHIAVE", PayServerClient.PS2S_KT_CLEAR);
            
            // comunicazione server2server
            osc.ServerURL(oConfig.getProperty("paymentsystem.S2SUrl") + "Request2RID.jsp");
            
            // Prepara il buffer di protocollo
            int ret = osc.PS2S_PC_Request2RID(sBufferData, oConfig.getProperty("paymentsystem.symbol"), new java.util.Date());
            m_oTracer.log(this.getClass(), "PS2S_PC_Request2RID ritorna " + ret, ActivityLogger.DEBUG);
            if (ret == Constant.RESULT_SUCCESS) {
                try {
                    sBufferData = java.net.URLEncoder.encode(osc.PS2S_NetBuffer(), "utf-8");
                    String sPaymentUrl = oConfig.getProperty("paymentsystem.url");
                    return sPaymentUrl + "pagamentoesterno.do?buffer=" + sBufferData;
                } catch(Exception ex) {
                    m_oTracer.log(this.getClass(), "encode exception " + ex.toString(), ActivityLogger.ERROR);
                }
            }
        } catch (Exception exc) {
            m_oTracer.log(this.getClass(), "PrepareBuffer exception " + exc.toString(), ActivityLogger.ERROR);
        }
        
        return("");
    }
    
    
    private String readReturnBuffer(String ReqBuffer) {
        String BufferDatiXML = "";
        
        try {
            Properties oConfig = new Properties();
            
            oConfig.load(new FileInputStream(propFile));            
            PayServerClient sc = new PayServerClient("CHIAVE", PayServerClient.PS2S_KT_CLEAR);
            
            // comunicazione server2server
            sc.ServerURL(oConfig.getProperty("paymentsystem.S2SUrl") + "PID2Data.jsp");
            
            // leggi il buffer
            int ret = sc.PS2S_PC_PID2Data(ReqBuffer, oConfig.getProperty("paymentsystem.symbol"), new java.util.Date(), WINDOW_MINUTES);
            
            switch (ret) {
                case Constant.RESULT_SUCCESS :
                    BufferDatiXML = sc.PS2S_DataBuffer();
                    m_iErrorValue = REQOK;
                    break;
                    
                case PayServerClient.pPS2S_COMPERROR :
                    m_iErrorValue = REQFAILED;
                    m_sErrorDescr = "Rifiutato - Fallita Inizializzazione Applicazione (n.3)";
                    break;
                    
                case PayServerClient.pPS2S_DATEERROR :
                    m_iErrorValue = REQFAILED;
                    m_sErrorDescr = "Rifiutato -  Impossibile estrarre buffer dati";
                    break;
                    
                case PayServerClient.pPS2S_DATAERROR :
                    m_iErrorValue = REQFAILED;
                    m_sErrorDescr = "Rifiutato -  Data non accettabile";
                    break;
                    
                case PayServerClient.pPS2S_HASHERROR :
                    m_iErrorValue = REQFAILED;
                    m_sErrorDescr = "Rifiutato - Fallita Verifica Hash";
                    break;
                    
                case PayServerClient.pPS2S_HASHNOTFOUND :
                    m_iErrorValue = REQFAILED;
                    m_sErrorDescr = "Rifiutato - Impossibile estrarre buffer HASH";
                    break;
                    
                case PayServerClient.pPS2S_CREATEHASHERROR :
                    m_iErrorValue = REQFAILED;
                    m_sErrorDescr = "Rifiutato - Impossibile creare buffer HASH";
                    break;
                    
                case PayServerClient.pPS2S_TIMEELAPSED :
                    m_iErrorValue = REQFAILED;
                    m_sErrorDescr = "Rifiutato - Finestra temporale scaduta";
                    break;
                    
                case PayServerClient.pPS2S_XMLERROR :
                    m_iErrorValue = REQFAILED;
                    m_sErrorDescr = "Rifiutato - Documento XML non valido: " + ReqBuffer;
                    break;
            }
        } catch (Exception exc) {
        }
        
        // torna buffer
        return(BufferDatiXML);
    }
    
    private String getPeopleId(AbstractPplProcess pplProcess) {
        AbstractData data = (AbstractData) pplProcess.getData();
        return data.getIdentificatorePeople().
                getIdentificatoreProcedimento();
    }
    
	public String getPortaleId()
		throws FileNotFoundException, IOException
	{
        Properties oConfig = new Properties();        
        oConfig.load(new FileInputStream(propFile));
        return oConfig.getProperty("paymentsystem.portalid"); 
	}
	
	public String getCommitMessage(String portaleID, String numeroOperazione, String idOrdine, boolean ok)
	{
		return "<CommitMsg>"
			+ "<PortaleID>" + portaleID + "</PortaleID>"
			+ "<NumeroOperazione>" + numeroOperazione + "</NumeroOperazione>"
			+ "<IDOrdine>" + idOrdine + "</IDOrdine>"		
			+ "<Commit>" + (ok?"OK":"NOK")+ "</Commit>"
			+ "</CommitMsg>";				
	}
	
	public ObserverSetting getObserverSetting()
	{
		ObserverSetting settings = new ObserverSetting();
		try
		{
	        Properties oConfig = new Properties();        
	        oConfig.load(new FileInputStream(propFile));        
	        int retryNumber = Integer.parseInt(oConfig.getProperty("observer.retryNumbers"));
	        int retryInterval = Integer.parseInt(oConfig.getProperty("observer.retryIntervalSeconds"));
	        boolean doNotSendConfirmationMail = Boolean.valueOf(oConfig.getProperty("observer.doNotSendConfirmationMail")).booleanValue();

	        if (retryInterval >= 0)
	        	settings.setRetryIntervalSeconds(retryInterval);
	        
	        if (retryNumber >= 0)
	        	settings.setRetryNumbers(retryNumber);
	        
	        settings.setDoNotSendConfirmationMail(doNotSendConfirmationMail);
		}
		catch(Exception ex){}
		return settings;
	}
}
