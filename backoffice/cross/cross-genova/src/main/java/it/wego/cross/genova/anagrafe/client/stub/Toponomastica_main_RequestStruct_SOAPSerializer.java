// This class was generated by the JAXRPC SI, do not edit.
// Contents subject to change without notice.
// JAX-RPC Standard Implementation (1.1.3, build R1)
// Generated source version: 1.1.3
package it.wego.cross.genova.anagrafe.client.stub;

import com.sun.xml.rpc.encoding.*;
import com.sun.xml.rpc.encoding.soap.SOAPConstants;
import com.sun.xml.rpc.streaming.*;
import javax.xml.namespace.QName;

public class Toponomastica_main_RequestStruct_SOAPSerializer extends ObjectSerializerBase implements Initializable {

    private static final javax.xml.namespace.QName ns1_args_QNAME = new QName("", "args");
    private static final javax.xml.namespace.QName ns2_ArrayOf_xsd_string_TYPE_QNAME = new QName("http://wstoponomastica.comune.genova.it:8080/toponomastica/Toponomastica.jws", "ArrayOf_xsd_string");
    private CombinedSerializer ns2_myns2_ArrayOf_xsd_string__StringArray_SOAPSerializer1;
    private static final int myARGS_INDEX = 0;

    public Toponomastica_main_RequestStruct_SOAPSerializer(QName type, boolean encodeType, boolean isNullable, String encodingStyle) {
        super(type, encodeType, isNullable, encodingStyle);
    }

    public void initialize(InternalTypeMappingRegistry registry) throws java.lang.Exception {
        ns2_myns2_ArrayOf_xsd_string__StringArray_SOAPSerializer1 = (CombinedSerializer) registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, java.lang.String[].class, ns2_ArrayOf_xsd_string_TYPE_QNAME);
    }

    public java.lang.Object doDeserialize(SOAPDeserializationState state, XMLReader reader,
            SOAPDeserializationContext context) throws java.lang.Exception {
        Toponomastica_main_RequestStruct instance = new Toponomastica_main_RequestStruct();
        Toponomastica_main_RequestStruct_SOAPBuilder builder = null;
        java.lang.Object member;
        boolean isComplete = true;
        javax.xml.namespace.QName elementName;

        reader.nextElementContent();
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_args_QNAME)) {
                member = ns2_myns2_ArrayOf_xsd_string__StringArray_SOAPSerializer1.deserialize(ns1_args_QNAME, reader, context);
                if (member instanceof SOAPDeserializationState) {
                    if (builder == null) {
                        builder = new Toponomastica_main_RequestStruct_SOAPBuilder();
                    }
                    state = registerWithMemberState(instance, state, member, myARGS_INDEX, builder);
                    isComplete = false;
                } else {
                    instance.setArgs((java.lang.String[]) member);
                }
                reader.nextElementContent();
            } else {
                throw new DeserializationException("soap.unexpectedElementName", new Object[]{ns1_args_QNAME, elementName});
            }
        }

        XMLReaderUtil.verifyReaderState(reader, XMLReader.END);
        return (isComplete ? (java.lang.Object) instance : (java.lang.Object) state);
    }

    public void doSerializeAttributes(java.lang.Object obj, XMLWriter writer, SOAPSerializationContext context) throws java.lang.Exception {
        Toponomastica_main_RequestStruct instance = (Toponomastica_main_RequestStruct) obj;

    }

    public void doSerializeInstance(java.lang.Object obj, XMLWriter writer, SOAPSerializationContext context) throws java.lang.Exception {
        Toponomastica_main_RequestStruct instance = (Toponomastica_main_RequestStruct) obj;

        ns2_myns2_ArrayOf_xsd_string__StringArray_SOAPSerializer1.serialize(instance.getArgs(), ns1_args_QNAME, null, writer, context);
    }
}
