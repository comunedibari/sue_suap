/**
 * Please modify this class to meet your needs This class is not complete
 */
package it.wego.cross.plugins.genova.commercio.service;

import it.wego.cross.actions.EventiAction;
import it.wego.cross.beans.EventoBean;
import it.wego.cross.dao.PraticaDao;
import it.wego.cross.dao.ProcessiDao;
import it.wego.cross.entity.Pratica;
import it.wego.cross.entity.PraticheEventi;
import it.wego.cross.entity.ProcessiEventi;
import it.wego.cross.events.notification.NotificationEngine;
import it.wego.cross.plugins.genova.commercio.actions.Constants;
import it.wego.cross.plugins.genova.commercio.xml.ermes.richiesta.DatiAggiornamentoDomanda;
import it.wego.cross.plugins.genova.commercio.xml.ermes.risposta.Risposta;
import it.wego.cross.service.ConfigurationService;
import it.wego.cross.utils.Log;
import it.wego.cross.utils.Utils;
import java.io.StringReader;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.logging.Logger;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.Marshaller;
import javax.xml.bind.Unmarshaller;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;

/**
 * This class was generated by Apache CXF 2.3.9 2014-06-27T12:26:45.172+02:00
 * Generated source version: 2.3.9
 *
 */
@javax.jws.WebService(
        serviceName = "AggiornaSuap",
        portName = "AggiornaSuapSoap12",
        targetNamespace = "http://italysolution.com/Suap",
        endpointInterface = "it.wego.cross.plugins.genova.commercio.service.AggiornaSuapSoap")

public class AggiornaSuapSoapImpl implements AggiornaSuapSoap {

    private static final Logger LOG = Logger.getLogger(AggiornaSuapSoapImpl.class.getName());

    @Autowired
    private ConfigurationService configurationService;
    @Autowired
    private PraticaDao praticaDao;
    @Autowired
    private ProcessiDao processiDao;
    @Autowired
    private EventiAction eventiAction;
    @Autowired
    private NotificationEngine notificationEngine;
    @Autowired
    private MessageSource messageSource;

    /* (non-Javadoc)
     * @see it.wego.cross.plugins.genova.commercio.service.AggiornaSuapSoap#aggiorna(java.lang.String  user ,)java.lang.String  password ,)java.lang.String  dati )*
     */
    @Override
    public java.lang.String aggiorna(java.lang.String user, java.lang.String password, java.lang.String dati) {
        LOG.info("Executing operation aggiorna -------- ");
        String userErmes = configurationService.getCachedPluginConfiguration(Constants.USER_ERMES, null, null);
        String passwordErmes = configurationService.getCachedPluginConfiguration(Constants.PASSWORD_ERMES, null, null);
        Risposta ris = new Risposta();
        ris.setCodice(Constants.ERMES_OK_CODE);
        ris.setDescrizione(Constants.ERMES_OK_DESC);
        boolean error = false;
        try {
            if (!(!Utils.e(userErmes) && !Utils.e(user) && user.equals(userErmes) && !Utils.e(passwordErmes) && !Utils.e(password) && password.equals(passwordErmes))) {
                error = true;
                ris.setCodice(Constants.ERROR_USER_PASSWORD_CODE);
                ris.setDescrizione(Constants.ERROR_USER_PASSWORD_DESC);
            }
            if (!error) {
                JAXBContext jaxbContext = JAXBContext.newInstance(DatiAggiornamentoDomanda.class);
                Unmarshaller unmarshaller = jaxbContext.createUnmarshaller();
                DatiAggiornamentoDomanda dad = (DatiAggiornamentoDomanda) unmarshaller.unmarshal(new StringReader(dati));
                if (!Utils.e(dad.getCodicelegacy())) {
                    // Pratica pratica = praticaDao.findPratica(Integer.parseInt(dad.getCodicedomanda()));
                    Pratica pratica = praticaDao.findByIdentificativoEsterno(dad.getCodicedomanda());
                    if (pratica != null) {
                        if (dad.getStatodomanda().equalsIgnoreCase(Constants.ERMES_STATO_CHIUSURA_POSITIVA)) {
                            ProcessiEventi pe = processiDao.findProcessiEventiByCodEventoIdProcesso(Constants.ERMES_EVENTO_CAMBIO_STATO_CHIUSO_POSITIVAMENTE, pratica.getIdProcesso().getIdProcesso());
                            if (pe != null) {
                                scriviEvento(pratica, pe, dad);
                            } else {
                                error = true;
                                ris.setCodice(Constants.ERROR_ERMES_NON_TROVATO_EVENTO_CHIUSURA_POSITIVA_CODE);
                                ris.setDescrizione(Constants.ERROR_ERMES_NON_TROVATO_EVENTO_CHIUSURA_POSITIVA_DESC);
                            }
                        } else if (dad.getStatodomanda().equalsIgnoreCase(Constants.ERMES_STATO_CHIUSURA_NEGATIVA)) {
                            ProcessiEventi pe = processiDao.findProcessiEventiByCodEventoIdProcesso(Constants.ERMES_EVENTO_CAMBIO_STATO_CHIUSO_NEGATIVAMENTE, pratica.getIdProcesso().getIdProcesso());
                            if (pe != null) {
                                scriviEvento(pratica, pe, dad);
                            } else {
                                error = true;
                                ris.setCodice(Constants.ERROR_ERMES_NON_TROVATO_EVENTO_CHIUSURA_NEGATIVA_CODE);
                                ris.setDescrizione(Constants.ERROR_ERMES_NON_TROVATO_EVENTO_CHIUSURA_NEGATIVA_DESC);
                            }
                        } else if (dad.getStatodomanda().equalsIgnoreCase(Constants.ERMES_STATO_SOSPENSIONE)) {
                            ProcessiEventi pe = processiDao.findProcessiEventiByCodEventoIdProcesso(Constants.ERMES_EVENTO_CAMBIO_STATO_SOSPENSIONE, pratica.getIdProcesso().getIdProcesso());
                            if (pe != null) {
                                scriviEvento(pratica, pe, dad);
                            } else {
                                error = true;
                                ris.setCodice(Constants.ERROR_ERMES_NON_TROVATO_EVENTO_SOSPENSIONE_CODE);
                                ris.setDescrizione(Constants.ERROR_ERMES_NON_TROVATO_EVENTO_SOSPENSIONE_DESC);
                            }
                        } else if (dad.getStatodomanda().equalsIgnoreCase(Constants.ERMES_COMUNICAZIONE)) {
                            ProcessiEventi pe = processiDao.findProcessiEventiByCodEventoIdProcesso(Constants.ERMES_EVENTO_CCOMUNICAZIONE, pratica.getIdProcesso().getIdProcesso());
                            if (pe != null) {
                                scriviEvento(pratica, pe, dad);
                            } else {
                                error = true;
                                ris.setCodice(Constants.ERROR_ERMES_NON_TROVATO_EVENTO_COMUNICAZIONE_CODE);
                                ris.setDescrizione(Constants.ERROR_ERMES_NON_TROVATO_EVENTO_COMUNICAZIONE_DESC);
                            }
                        } else {
                            error = true;
                            ris.setCodice(Constants.ERROR_ERMES_TIPO_OPERAZIONE_ERRATA_CODE);
                            ris.setDescrizione(Constants.ERROR_ERMES_TIPO_OPERAZIONE_ERRATA_DESC);
                        }
                    } else {
                        error = true;
                        ris.setCodice(Constants.ERROR_ERMES_PRATICA_NOT_FOUND_CODE);
                        ris.setDescrizione(Constants.ERROR_ERMES_PRATICA_NOT_FOUND_DESC);
                    }
                } else {
                    error = true;
                    ris.setCodice(Constants.ERROR_ERMES_PRATICA_NOT_FOUND_CODE);
                    ris.setDescrizione(Constants.ERROR_ERMES_PRATICA_NOT_FOUND_DESC);
                }

            }
            if (error) {
                Log.WS.error("Si è verificato un errore gestito nel metodo aggiorna. Restituisco il messaggio di errore con codice " + ris.getCodice() + "(" + ris.getDescrizione() + ")");
            }

            JAXBContext jc = JAXBContext.newInstance(Risposta.class);
            Marshaller marshaller = jc.createMarshaller();
            marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);
            StringWriter st = new StringWriter();
            marshaller.marshal(ris, st);
            return st.toString();

        } catch (java.lang.Exception ex) {
            Log.WS.error("Si è verificato un errore durante l'aggiornamento della pratica a partire dal backoffice del commercio", ex);
            throw new RuntimeException(ex);
        }
    }

    private void scriviEvento(Pratica pratica, ProcessiEventi pe, DatiAggiornamentoDomanda dad) throws Exception {
        EventoBean eventoBean = new EventoBean();
        eventoBean.setIdPratica(pratica.getIdPratica());
        eventoBean.setIdEventoProcesso(pe.getIdEvento());
        eventoBean.setIdUtente(null);
        if (!Utils.e(dad.getMotivazione())) {
            eventoBean.setNote(dad.getMotivazione());
        }
        // esiste sulla pratica padre l'evento corrispondente e quindi lo inserisco
        eventiAction.gestisciProcessoEvento(eventoBean);

        Integer idPraticaEventoPadre = (Integer) eventoBean.getMessages().get("EVENTO_PRATICA_PADRE");
        PraticheEventi praticaEventoPadre = praticaDao.getDettaglioPraticaEvento(idPraticaEventoPadre);

        String notificaMessage = messageSource.getMessage("ermes.aggiorna.notifica", new Object[]{
            praticaEventoPadre.getIdPratica().getIdentificativoPratica(),
            praticaEventoPadre.getDescrizioneEvento()
        }, Locale.getDefault());

        List<String> notificationUserList = new ArrayList<String>();
        if (praticaEventoPadre.getIdPratica().getIdUtente() != null) {
            notificationUserList.add(praticaEventoPadre.getIdPratica().getIdUtente().getUsername());
        }
        notificationEngine.createNotification(praticaEventoPadre, notificationUserList, notificaMessage);

    }

}
