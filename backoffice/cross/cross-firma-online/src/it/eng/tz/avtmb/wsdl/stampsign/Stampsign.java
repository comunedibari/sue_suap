package it.eng.tz.avtmb.wsdl.stampsign;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 2.3.9
 * 2020-11-10T16:12:25.617+01:00
 * Generated source version: 2.3.9
 * 
 */
@WebServiceClient(name = "stampsign", 
                  wsdlLocation = "file:/C:/Users/pierluigi.anaclerio/Desktop/firma remota/firma remota/stampsignwsdl.wsdl",
                  targetNamespace = "http://stampsign.wsdl.avtmb.tz.eng.it") 
public class Stampsign extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://stampsign.wsdl.avtmb.tz.eng.it", "stampsign");
    public final static QName DocumentStampSignAuthBinding = new QName("http://stampsign.wsdl.avtmb.tz.eng.it", "documentStampSignAuthBinding");
    public final static QName DocumentStampSignBinding = new QName("http://stampsign.wsdl.avtmb.tz.eng.it", "documentStampSignBinding");
    static {
        URL url = null;
        try {
            url = new URL("file:/C:/Users/pierluigi.anaclerio/Desktop/firma remota/firma remota/stampsignwsdl.wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(Stampsign.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "file:/C:/Users/pierluigi.anaclerio/Desktop/firma remota/firma remota/stampsignwsdl.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public Stampsign(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public Stampsign(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public Stampsign() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public Stampsign(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public Stampsign(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public Stampsign(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     *
     * @return
     *     returns DocumentStampSignAuthPt
     */
    @WebEndpoint(name = "documentStampSignAuthBinding")
    public DocumentStampSignAuthPt getDocumentStampSignAuthBinding() {
        return super.getPort(DocumentStampSignAuthBinding, DocumentStampSignAuthPt.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns DocumentStampSignAuthPt
     */
    @WebEndpoint(name = "documentStampSignAuthBinding")
    public DocumentStampSignAuthPt getDocumentStampSignAuthBinding(WebServiceFeature... features) {
        return super.getPort(DocumentStampSignAuthBinding, DocumentStampSignAuthPt.class, features);
    }
    /**
     *
     * @return
     *     returns DocumentStampSignPt
     */
    @WebEndpoint(name = "documentStampSignBinding")
    public DocumentStampSignPt getDocumentStampSignBinding() {
        return super.getPort(DocumentStampSignBinding, DocumentStampSignPt.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns DocumentStampSignPt
     */
    @WebEndpoint(name = "documentStampSignBinding")
    public DocumentStampSignPt getDocumentStampSignBinding(WebServiceFeature... features) {
        return super.getPort(DocumentStampSignBinding, DocumentStampSignPt.class, features);
    }

}
