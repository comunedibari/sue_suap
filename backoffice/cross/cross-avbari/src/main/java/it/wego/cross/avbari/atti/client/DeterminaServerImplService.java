package it.wego.cross.avbari.atti.client;

import java.net.URL;

import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.core.io.ClassPathResource;
import org.springframework.core.io.Resource;

/**
 * This class was generated by Apache CXF 2.3.9
 * 2015-02-17T11:54:00.265+01:00
 * Generated source version: 2.3.9
 * 
 */
@WebServiceClient(name = "DeterminaServerImplService", 
                  targetNamespace = "http://impl.server.ws.amministrazioneatti.avt.linksmt.it/") 
public class DeterminaServerImplService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://impl.server.ws.amministrazioneatti.avt.linksmt.it/", "DeterminaServerImplService");
    public final static QName DeterminaServerImplPort = new QName("http://impl.server.ws.amministrazioneatti.avt.linksmt.it/", "DeterminaServerImplPort");
    private static final Logger logger = LoggerFactory.getLogger(DeterminaServerImplService.class.getName());
    static {
        URL url = null;
        String wsdlClasspathUrl = "it/wego/cross/avbari/linksmt/wsdl_produzione/02_05_2018/determina/wsdl_determina.wsdl";
        try {
        	Resource res = new ClassPathResource(wsdlClasspathUrl);
            url = res.getURL();
        } catch (Exception e) {
        	logger.warn("Impossibile inizializzare l'URL del WS per le determine accedendo al file del classpath {} ", wsdlClasspathUrl, e);
        }
        WSDL_LOCATION = url;
    }

    public DeterminaServerImplService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public DeterminaServerImplService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public DeterminaServerImplService() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public DeterminaServerImplService(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public DeterminaServerImplService(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public DeterminaServerImplService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     *
     * @return
     *     returns DeterminaServer
     */
    @WebEndpoint(name = "DeterminaServerImplPort")
    public DeterminaServer getDeterminaServerImplPort() {
        return super.getPort(DeterminaServerImplPort, DeterminaServer.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns DeterminaServer
     */
    @WebEndpoint(name = "DeterminaServerImplPort")
    public DeterminaServer getDeterminaServerImplPort(WebServiceFeature... features) {
        return super.getPort(DeterminaServerImplPort, DeterminaServer.class, features);
    }

}
