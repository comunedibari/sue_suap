/**
 * Please modify this class to meet your needs This class is not complete
 */
package it.wego.cross.webservices.cxf;

import java.io.File;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.jws.WebService;
import javax.xml.namespace.NamespaceContext;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathFactory;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.xml.sax.InputSource;

import com.google.common.base.Strings;

import it.wego.cross.actions.ErroriAction;
import it.wego.cross.actions.PraticheAction;
import it.wego.cross.constants.AnaTipiEvento;
import it.wego.cross.constants.Constants;
import it.wego.cross.constants.Error;
import it.wego.cross.dao.LookupDao;
import it.wego.cross.dao.ProcedimentiDao;
import it.wego.cross.dao.ProcessiDao;
import it.wego.cross.dao.TemplateDao;
import it.wego.cross.dto.AllegatoRicezioneDTO;
import it.wego.cross.dto.ErroreDTO;
import it.wego.cross.entity.Allegati;
import it.wego.cross.entity.Enti;
import it.wego.cross.entity.EventiTemplate;
import it.wego.cross.entity.LkComuni;
import it.wego.cross.entity.Pratica;
import it.wego.cross.entity.PraticheEventi;
import it.wego.cross.entity.Procedimenti;
import it.wego.cross.entity.ProcedimentiEnti;
import it.wego.cross.entity.Processi;
import it.wego.cross.entity.ProcessiEventi;
import it.wego.cross.entity.Staging;
import it.wego.cross.events.comunicazione.bean.ComunicazioneBean;
import it.wego.cross.plugins.aec.AeCGestionePratica;
import it.wego.cross.plugins.aec.ConcessioniAutorizzazioniNamespaceContext;
import it.wego.cross.plugins.pratica.GestionePratica;
import it.wego.cross.serializer.AllegatiSerializer;
import it.wego.cross.service.EntiService;
import it.wego.cross.service.PluginService;
import it.wego.cross.service.PraticheService;
import it.wego.cross.service.ProcedimentiService;
import it.wego.cross.service.WorkFlowService;
import it.wego.cross.utils.Log;
import it.wego.cross.utils.PraticaUtils;
import it.wego.cross.utils.Utils;

/**
 * This class was generated by Apache CXF 2.5.2 2012-11-15T16:48:22.619+01:00
 * Generated source version: 2.5.2
 *
 */
@Component("crossService")
@WebService(serviceName = "CrossWSServiceService",
        portName = "CrossWSService",
        targetNamespace = "http://webservice.backend.people.it/",
        wsdlLocation = "CrossWSService.wsdl",
        endpointInterface = "it.wego.cross.webservices.cxf.CrossWSService")
public class CrossWSServiceImpl implements CrossWSService {

    @Autowired
    private WorkFlowService workflowService;
    @Autowired
    private EntiService entiService;
    @Autowired
    private LookupDao lookupDao;
    @Autowired
    private ProcedimentiDao procedimentiDao;
    @Autowired
    private ProcessiDao processiDao;
    @Autowired
    private PluginService pluginService;
    @Autowired
    private TemplateDao templateDao;
    @Autowired
    private PraticheAction praticheAction;
    @Autowired
    private ProcedimentiService procedimentiService;
    @Autowired
    private ErroriAction erroriAction;
    @Autowired
    private PraticheService praticheService;

    @Override
    public java.lang.String process(java.lang.String data) {
        try {

            //1. Salvataggio XML su filesystem
            File xmlDump = Utils.dumpXmlPratica(data);
            //Modifica il charset per gestire i caratteri sporchi
            data = Utils.convertXmlCharset(data, "ISO-8859-1", "UTF-8");

            //2. eseguo la trasformazione per ottenere l'xml Cross
            InputSource source = new InputSource(new StringReader(data));
            XPath xpath = XPathFactory.newInstance().newXPath();
            NamespaceContext context = new ConcessioniAutorizzazioniNamespaceContext(
                    "cea", "http://gruppoinit.it/b110/ConcessioniEAutorizzazioni/procedimentoUnico",
                    "ogg", "http://egov.diviana.it/b109/OggettiCondivisi");
            xpath.setNamespaceContext(context);

            String codiceNodo = xpath.evaluate(AeCGestionePratica.XPATH_IDENTIFICATIVO_NODO, source);

            source = new InputSource(new StringReader(data));
            String codEnte = xpath.evaluate(AeCGestionePratica.XPATH_ID_ENTE, source);

            Enti ente = entiService.findByCodEnte(codEnte);

            GestionePratica gp = pluginService.getGestionePratica(ente.getIdEnte());
            String identificativoPratica = gp.getIdentificativoPratica(data);
            Pratica praticaEsistente = praticheService.getPraticaByIdentificativo(identificativoPratica);
            if (praticaEsistente != null) {
                //Pratica già inviata: traccio l'evento ma ritorno success all'utente
                Log.WS.warn("La pratica è già presente in CROSS, la ignoro silenziosamente...");
                ErroreDTO errore = erroriAction.getError(Error.ERRORE_PARSING_PRATICA, "La pratica '" + identificativoPratica + "' inviata è già presente in CROSS", null, praticaEsistente, null);
                erroriAction.saveError(errore);
                xmlDump.delete();
                return "success";
            }

            it.wego.cross.xml.Pratica praticaCross = getPratica(gp, data);

            if (praticaCross == null) {
                Log.WS.error("Non è stato possibile generare la pratica a partire dall'XML ricevuto. E' disponibile un dump della pratica al seguente path: " + xmlDump.getAbsolutePath());
                throw new Exception("Non è stato possibile generare la pratica");
            }

            String oggetto = gp.getOggettoPratica(data);
            Log.WS.info("Oggetto pratica: " + oggetto);
            Procedimenti procedimentoSuap = procedimentiService.getProcedimento(praticaCross.getIdProcedimentoSuap());
            Log.WS.info("Procedimento SUAP: " + procedimentoSuap.getCodProc());
            Enti enteSuap = entiService.findByCodEnte(praticaCross.getCodEnte());
            Log.WS.info("Ente SUAP: " + enteSuap.getDescrizione());
            //Processi processo = getIdProcesso(enteSuap, procedimentoSuap);
            /* Requisito R12 */
            Procedimenti procedimentoPersonalizzato = procedimentiService.getProcedimento(praticaCross.getProcedimenti().getProcedimento().get(0).getCodProcedimento());
            Processi processo = getIdProcesso(enteSuap, procedimentoPersonalizzato);
            boolean processoPersonalizzato = true;
            if (processo == null) {
            	processo = getIdProcesso(enteSuap, procedimentoSuap);
            	processoPersonalizzato = false;
            }
            /* Fine Requisito R12 */
            Log.WS.info("ID processo: " + processo.getIdProcesso() + " " + processo.getDesProcesso());
            ProcessiEventi eventoProcesso = processiDao.findProcessiEventiByCodEventoIdProcesso(AnaTipiEvento.RICEZIONE_PRATICA, processo.getIdProcesso());

            //3. Recupero gli allegati
            it.wego.cross.xml.Allegati allegatiXml = gp.getAllegati(data);
            praticaCross.setAllegati(allegatiXml);
            List<AllegatoRicezioneDTO> allegati = new ArrayList<AllegatoRicezioneDTO>();
            if (eventoProcesso.getFlgRicevuta().equalsIgnoreCase("S")) {
                if (eventoProcesso.getEventiTemplateList() != null && !eventoProcesso.getEventiTemplateList().isEmpty()) {
                    List<EventiTemplate> eventiTemplate = templateDao.getTemplatesPerEnte(eventoProcesso, enteSuap, procedimentoSuap);
                    for (EventiTemplate et : eventiTemplate) {
                        byte[] documentBody = workflowService.generaDocumento(praticaCross, et);
                        AllegatoRicezioneDTO allegato = new AllegatoRicezioneDTO();
                        Allegati a = new Allegati();
                        a.setDescrizione(et.getIdTemplate().getDescrizione());
                        a.setNomeFile(et.getIdTemplate().getNomeFile());
                        a.setFile(documentBody);
                        a.setTipoFile(et.getIdTemplate().getMimeType());
                        allegato.setAllegato(a);
                        allegato.setModelloDomanda("N");
                        //Lo imposto come da inviare, in quanto è una ricevuta dell'evento
                        allegato.setSend(Boolean.TRUE);
                        allegati.add(allegato);
                    }
                }
            }
            //Popolo la lista degli allegati per il workflow
            if (praticaCross.getAllegati() != null) {
                for (it.wego.cross.xml.Allegato allegato : praticaCross.getAllegati().getAllegato()) {
                    AllegatoRicezioneDTO a = AllegatiSerializer.serializeAllegatoRicezione(allegato);
                    if (a.isModelloDomanda()) {
                        //In ricezione invio anche la pratica
                        a.setSend(Boolean.TRUE);
                    }
                    allegati.add(a);
                }
            }
            
            //4. Salvo l'xml nell'area di staging
            Log.WS.info("Preparo i dati per salvare l'area di staging");
            Date dataRicezione = new Date();
            String xmlPratica = PraticaUtils.getXmlFromPratica(praticaCross);
            Log.WS.info("Dump XML pratica");
            Log.WS.info(xmlPratica);
            Staging staging = new Staging();
            staging.setIdentificativoProvenienza(codiceNodo);
            staging.setOggetto(oggetto);
            Log.WS.info("Data ricezione: " + dataRicezione);
            staging.setDataRicezione(dataRicezione);
            Log.WS.info("Tipo messaggio: " + Constants.WEBSERVICE_AEC);
            staging.setTipoMessaggio(Constants.WEBSERVICE_AEC);
            staging.setXmlRicevuto(data.getBytes());
            staging.setXmlPratica(xmlPratica.getBytes());
            staging.setIdEnte(enteSuap);
            praticheAction.salvaStaging(staging);
            //Cancello il dump dell'XML
            xmlDump.delete();

            //5. Creo la pratica
            LkComuni comune = getComune(praticaCross.getCodCatastaleComune());
            Log.WS.info("Preparo i dati per il salvataggio della pratica");
            Pratica pratica = new Pratica();
            Log.WS.info("Identificativo pratica: " + identificativoPratica);
            pratica.setIdentificativoPratica(identificativoPratica);
            Log.WS.info("Protocollo: " + praticaCross.getProtocollo());
            pratica.setProtocollo(praticaCross.getProtocollo());
            Log.WS.info("Oggetto: " + oggetto);
            pratica.setOggettoPratica(oggetto);
            Log.WS.info("Responsabile del procedimento: " + praticaCross.getResponsabileProcedimento());
            pratica.setResponsabileProcedimento(praticaCross.getResponsabileProcedimento());
            Log.WS.info("Data ricezione: " + dataRicezione);
            pratica.setDataRicezione(dataRicezione);
            Log.WS.info("Id staging: " + staging.getIdStaging());
            pratica.setIdStaging(staging);
            Log.WS.info("Id Comune: " + comune.getIdComune());
            pratica.setIdComune(comune);
            Log.WS.info("ID ente SUAP: " + enteSuap.getIdEnte());
            Log.WS.info("ID procedimento: " + procedimentoSuap.getIdProc());
            //ProcedimentiEnti pe = procedimentiDao.findProcedimentiEntiByProcedimentoEnte(enteSuap.getIdEnte(), procedimentoSuap.getIdProc());
            /* Requisito R12 */
            ProcedimentiEnti pe = null;
            if(processoPersonalizzato) {
            	pe = procedimentiDao.findProcedimentiEntiByProcedimentoEnte(enteSuap.getIdEnte(), procedimentoPersonalizzato.getIdProc());
            }
            else {
            	pe = procedimentiDao.findProcedimentiEntiByProcedimentoEnte(enteSuap.getIdEnte(), procedimentoSuap.getIdProc());
            }
            /* Fine Requisito R12 */
            Log.WS.info("Se responsabile vuoto metto quello che sta sul procedimenti ente");
            if (Strings.isNullOrEmpty(pratica.getResponsabileProcedimento())) {
                pratica.setResponsabileProcedimento(pe.getResponsabileProcedimento());
            }
            pratica.setIdProcEnte(pe);
//            pratica.setIdEnte(enteSuap);
//            pratica.setIdProc(procedimentoSuap);
            Log.WS.info("ID processo: " + processo.getIdProcesso());
            pratica.setIdProcesso(processo);
            Log.WS.info("Salvo la pratica");
            praticheAction.salvaPratica(pratica);
            Log.WS.info("Popolo i procedimenti");
            praticheAction.popolaProcedimenti(pratica, praticaCross);

            //6. Inserisco le anagrafiche, per quanto possibile, collegate alla pratica
            if (praticaCross.getAnagrafiche() != null && !praticaCross.getAnagrafiche().isEmpty()) {
                try {
                    praticheAction.insertAnagrafiche(praticaCross.getAnagrafiche(), pratica);
                    xmlPratica = PraticaUtils.getXmlFromPratica(praticaCross);
                    staging.setXmlPratica(xmlPratica.getBytes());
                    praticheAction.updateStaging(staging, pratica);
                } catch (Exception ex) {
                    Log.WS.error("Non è stato possibile salvare l'anagrafica", ex);
                }
            }

            //7. Creo l'evento di ricezione
            Log.WS.info("Inserisco evento ricezione");
            Log.WS.info("Poiché non ho ancora anagrafiche presenti in banca dati, forzo i destinatari alle anagrafiche presenti nell'XML della pratica");
            List<String> destinatari = getDestinatariEmail(praticaCross);
            Log.WS.info("Trovati " + destinatari.size() + " destinatari");
            Log.WS.info("Inserisco evento di ricezione");
            ComunicazioneBean cb = praticheAction.inserisciEventoRicezione(praticaCross, pratica, eventoProcesso, destinatari, allegati);
            PraticheEventi praticaEvento = praticheService.getPraticaEvento(cb.getIdEventoPratica());
            Log.WS.info("Operazione terminata correttamente");

            Log.WS.info("Elaborazione post creazione pratica");
            gp.postCreazionePratica(pratica, data);
            Log.WS.info("Elaborazione post creazione pratica terminata");

            praticheService.startCommunicationProcess(pratica, praticaEvento, cb);

            Log.WS.info("Inserisco evento ricezione");
            gp.notifica(pratica, "Descrizione evento: ricezione pratica");
            Log.WS.info("Operazione terminata correttamente");
            
            /* Requisito R9*/
            //Se la pratica non viene protocollata setto i valori del protocollo restituiti come di seguito per fare elaborare la pratica dal job di riprotocollazione
            /*if(pratica.getProtocollo()==null || ("").equals(pratica.getProtocollo().trim())){
                pratica.setCodRegistro("");
                pratica.setAnnoRiferimento(0);
            	praticheAction.aggiornaPratica(pratica);
            }*/
            /*Requisito R9*/

            // FINE
            return "success";
        } catch (Exception e) {
            String err = "Si è verificato un errore grave nella ricezione della pratica";
            Log.WS.error(err, e);
            try {
                ErroreDTO errore = erroriAction.getError(Error.ERRORE_GRAVE_RICEZIONE, e.getMessage(), e, null, null);
                erroriAction.saveError(errore);
            } catch (Exception ex) {
                err = "errore salvando in tabella errori";
                Log.WS.error(err, ex);
            }
            return e.getMessage();
        }
    }

	private LkComuni getComune(String codiceCatastale) {
        LkComuni comune = lookupDao.findComuneByCodCatastale(codiceCatastale);
        return comune;
    }

    private Processi getIdProcesso(Enti ente, Procedimenti procedimentoSuap) throws Exception {
        Processi processo = workflowService.getProcessToUse(ente.getIdEnte(), procedimentoSuap.getIdProc());
        return processo;
    }

    private List<String> getDestinatariEmail(it.wego.cross.xml.Pratica praticaCross) {
        List<String> email = new ArrayList<String>();
        try {
            it.wego.cross.xml.Recapito notifica = praticaCross.getNotifica();

            if (notifica != null) {
                if (!Utils.e(notifica.getPec())) {
                    email.add(notifica.getPec());
                    return email;
                } else if (!Utils.e(notifica.getEmail())) {
                    email.add(notifica.getEmail());
                    return email;
                }
            }
            if (praticaCross.getAnagrafiche() != null) {
                for (it.wego.cross.xml.Anagrafiche anagrafiche : praticaCross.getAnagrafiche()) {
                    //Verifica se è il richiedente
                    if (anagrafiche.getCodTipoRuolo().equalsIgnoreCase("R") || anagrafiche.getCodTipoRuolo().equalsIgnoreCase("B")) {
                        it.wego.cross.xml.Recapiti recapitiXml = anagrafiche.getAnagrafica().getRecapiti();
                        if (recapitiXml != null && recapitiXml.getRecapito() != null && !recapitiXml.getRecapito().isEmpty()) {
                            for (it.wego.cross.xml.Recapito r : recapitiXml.getRecapito()) {
                                if (!Utils.e(r.getPec())) {
                                    email.add(r.getPec());
                                } else if (!Utils.e(r.getEmail())) {
                                    email.add(r.getEmail());
                                }
                            }
                        }
                    }
                }
            }
        } catch (Exception ex) {
            //Non bloccante
            try {
                String err = "Errore cercando i destinatari della comunicazione";
                ErroreDTO errore = erroriAction.getError(Error.ERRORE_PARSING_PRATICA, err, ex, null, null);
                erroriAction.saveError(errore);
            } catch (Exception ex1) {
                Log.APP.error("getDestinatariEmail", ex1);
            }
        }
        return email;
    }

    private it.wego.cross.xml.Pratica getPratica(GestionePratica gp, String data) throws Exception {
        try {
            it.wego.cross.xml.Pratica praticaCross = gp.execute(data);
            return praticaCross;
        } catch (Exception ex) {
            String err = "Errore interpretando la pratica ricevuta";
            ErroreDTO errore = erroriAction.getError(Error.ERRORE_PARSING_PRATICA, err, ex, null, null);
            erroriAction.saveError(errore);
            throw new Exception(ex);
        }
    }
}
